<!DOCTYPE html>
<html>
<head>
  <title>ShoppingList</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
  <%= javascript_importmap_tags %>

  <!-- Google Maps API Script with async and defer -->
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAh7L4FQj5_TNUS5TtoMUcFO5tM4_r3E7c&libraries=places&v=beta&loading=async" async defer></script>
</head>
<body class="<%= controller_name %> <%= action_name %>" data-user-id="<%= current_user.id if user_signed_in? %>">
  <%= render "shared/navbar" %>
  <header>
    <nav>
      <%= link_to 'Cart', cart_path %>
    </nav>
  </header>
  <main>
    <%= yield %>
    <% if controller_name == 'pages' && action_name == 'home' %>
      <div id="map" style="height: 500px; width: 100%;"></div>
    <% end %>
  </main>

  <!-- Pop-up Notification Script -->
  <% if user_signed_in? %>
    <script>
      function checkForNewMessages() {
        const userId = document.body.dataset.userId;
        fetch(`/users/${userId}/messages/unread_messages_count`)
          .then(response => response.json())
          .then(data => {
            if (data.unread_messages > 0) {
              showNewMessagePopup(data.unread_messages);
              updateUnreadMessageCount(data.unread_messages);
            }
          })
          .catch(error => console.error('Error fetching messages:', error));
      }

      function showNewMessagePopup(unreadCount) {
        const popup = document.createElement('div');
        popup.classList.add('popup-notification');
        popup.innerHTML = `You have ${unreadCount} new message(s)! <a href="/users/${document.body.dataset.userId}/messages">View Messages</a>`;
        document.body.appendChild(popup);

        // Automatically remove the popup after 5 seconds
        setTimeout(() => {
          popup.remove();
        }, 5000);
      }

      function updateUnreadMessageCount(unreadCount) {
        const unreadCountElement = document.getElementById('unread-message-count');
        if (unreadCountElement) {
          unreadCountElement.textContent = unreadCount;
        }
      }

      // Trigger the check for new messages on page load and at regular intervals
      document.addEventListener('turbolinks:load', function() {
        checkForNewMessages();
        setInterval(checkForNewMessages, 60000); // Check every 60 seconds
      });

      document.addEventListener('turbo:load', function() {
        checkForNewMessages();
      });
    </script>
  <% end %>

  <!-- Define initMap function in the global scope -->
  <script>
    function initMap() {
      const mapOptions = {
        center: { lat: 40.7128, lng: -74.0060 }, // Default to New York City; update as needed
        zoom: 12,
        mapId: '199aae26c3acd33a', // Replace with your actual Map ID
      };

      const map = new google.maps.Map(document.getElementById("map"), mapOptions);

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition((position) => {
          const userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          map.setCenter(userLocation);

          // User's location marker with default icon
          new google.maps.Marker({
            map: map,
            position: userLocation,
            title: "You are here",
            icon: {
              url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
              scaledSize: new google.maps.Size(32, 32) // Adjust size as needed
            }
          });

          const service = new google.maps.places.PlacesService(map);
          const request = {
            location: userLocation,
            radius: '5000',
            type: ['supermarket']
          };

          service.nearbySearch(request, (results, status) => {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
              results.forEach((place) => {
                const placeLocation = place.geometry.location;

                // Marker for each supermarket
                new google.maps.Marker({
                  map: map,
                  position: placeLocation,
                  title: place.name,
                  icon: {
                    url: 'http://maps.google.com/mapfiles/ms/icons/shopping.png', // Default shopping icon
                    scaledSize: new google.maps.Size(32, 32) // Adjust size as needed
                  }
                });
              });
            } else {
              console.error('Places service failed: ' + status);
            }
          });
        }, () => {
          handleLocationError(true, map.getCenter());
        });
      } else {
        handleLocationError(false, map.getCenter());
      }
    }

    function handleLocationError(browserHasGeolocation, pos) {
      console.error(browserHasGeolocation ?
                  'Error: The Geolocation service failed.' :
                  'Error: Your browser doesn\'t support geolocation.');
    }

    // Conditionally initialize map based on the presence of map container
    document.addEventListener('turbolinks:load', function() {
      if (document.getElementById('map')) {
        initMap();
      }
    });
    document.addEventListener('turbo:load', function() {
      if (document.getElementById('map')) {
        initMap();
      }
    });

    window.initMap = initMap;
  </script>
</body>
</html>
