<!DOCTYPE html>
<html>
<head>
  <title>ShopListy</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= stylesheet_link_tag 'application', media: 'all', 'data-turbo-track': 'reload' %>
  <%= javascript_importmap_tags %>
  <%= javascript_include_tag 'message_form' %>

  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAh7L4FQj5_TNUS5TtoMUcFO5tM4_r3E7c&libraries=places&v=3&loading=async" async defer></script>
</head>
<body class="<%= controller_name %> <%= action_name %>" data-user-id="<%= current_user.id if user_signed_in? %>">
  <%= render "shared/navbar" %>

  <% if flash[:notice] %>
    <div class="alert alert-success">
      <%= flash[:notice] %>
    </div>
  <% end %>

  <% if flash[:alert] %>
    <div class="alert alert-danger">
      <%= flash[:alert] %>
    </div>
  <% end %>

  <% flash.each do |key, message| %>
  <div class="alert alert-<%= key == :notice ? 'success' : 'danger' %>">
    <%= message %>
  </div>
<% end %>

<div id="flash-messages">
  <% flash.each do |key, message| %>
    <div class="alert alert-<%= key == :notice ? 'success' : 'danger' %>">
      <%= message %>
    </div>
  <% end %>
</div>

  <main>
    <%= yield %>
    <% if controller_name == 'pages' && action_name == 'home' %>
      <div id="map" style="height: 500px; width: 100%;"></div>
    <% end %>
  </main>

  <% if user_signed_in? %>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const userId = document.body.dataset.userId;

        // Check if current-user-id element exists
        const currentUserIdElement = document.getElementById('current-user-id');
        const currentUserId = currentUserIdElement ? currentUserIdElement.value : null; // Set to null if not found

        if (userId) {
          loadUnreadMessageCount();
          checkForNewMessages();
        }

        // Load the unread message count from local storage
        function loadUnreadMessageCount() {
          const storedCount = parseInt(localStorage.getItem('unreadMessagesCount')) || 0;
          updateUnreadMessageCount(storedCount);
        }

        // Function to update the unread message count in the UI
        function updateUnreadMessageCount(unreadCount) {
          const unreadCountElement = document.getElementById('unread-message-count');
          if (unreadCountElement) {
            unreadCountElement.textContent = unreadCount > 0 ? unreadCount : ''; // Hide counter if 0
            console.log('Updated unread message count displayed:', unreadCount);
          } else {
            console.error('Unread message count element not found');
          }
        }

        // Function to fetch and update the unread messages count
        function checkForNewMessages() {
          fetch(`/users/${userId}/unread_messages_count`)
            .then(response => {
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              return response.json();
            })
            .then(data => {
              console.log('Unread messages fetched:', data);
              updateUnreadMessageCount(data.unread_messages);
              localStorage.setItem('unreadMessagesCount', data.unread_messages);
            })
            .catch(error => console.error('Error fetching unread messages:', error));
        }

        // Optionally, refresh the count periodically
        setInterval(checkForNewMessages, 30000); // every 30 seconds

        // Function to send a message
        function sendMessage(message, conversationId) {
          fetch(`/users/${userId}/conversations/${conversationId}/messages`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ message: message })
          })
          .then(response => {
            if (response.ok) {
              console.log('Message sent successfully.');
              checkForNewMessages(); // Check for new messages after sending
            } else {
              console.error('Error sending message:', response);
            }
          })
          .catch(error => console.error('Error sending message:', error));
        }

        // Function to mark messages as read when a conversation is opened
        function markMessagesAsRead(conversationId) {
          console.log('Marking messages as read for conversation:', conversationId); // Debugging line
          return fetch(`/users/${userId}/conversations/${conversationId}/mark_as_read`, {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          })
          .then(response => {
            console.log('Response from mark as read:', response); // Debugging line
            if (response.ok) {
              return response.json(); // Get the unread count returned from the server
            } else {
              throw new Error('Error marking messages as read: ' + response.status);
            }
          })
          .then(data => {
            console.log('Updated unread messages count:', data.unread_messages); // Debugging line
            updateUnreadMessageCount(data.unread_messages); // Update UI with the new count
            localStorage.setItem('unreadMessagesCount', data.unread_messages); // Update localStorage with the new unread count
          })
          .catch(error => console.error('Error marking messages as read:', error));
        }

        // Event listeners for Turbo navigation
        document.addEventListener('turbo:load', function() {
          console.log('Turbo load event fired'); // Debugging line
          loadUnreadMessageCount(); // Load the count when navigating
          checkForNewMessages(); // Fetch the latest count

          const conversationHeader = document.getElementById('conversation-header');
          if (conversationHeader) {
            const conversationId = conversationHeader.dataset.conversationId;
            markMessagesAsRead(conversationId) // Mark messages as read when the conversation is loaded
              .then(() => {
                checkForNewMessages(); // Update the count after marking as read
              });
          }

          // Show the manual mark as read button if the conversation header exists
          if (conversationHeader) {
            document.getElementById('mark-as-read-button').style.display = 'block';
          }
        });

        // Button event listener for marking messages as read
        document.getElementById('mark-as-read-button').addEventListener('click', function() {
          const conversationHeader = document.getElementById('conversation-header');
          if (conversationHeader) {
            const conversationId = conversationHeader.dataset.conversationId;
            markMessagesAsRead(conversationId);
          }
        });
      });

      // Google Maps initialization function
      function initMap() {
        const mapOptions = {
          center: { lat: 40.7128, lng: -74.0060 }, // Default location
          zoom: 12,
          mapId: '199aae26c3acd33a',
        };

        const map = new google.maps.Map(document.getElementById("map"), mapOptions);

        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition((position) => {
            const userLocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            map.setCenter(userLocation);

            // Add marker for user's location
            new google.maps.Marker({
              map: map,
              position: userLocation,
              title: "You are here",
              icon: {
                url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                scaledSize: new google.maps.Size(32, 32)
              }
            });

            const service = new google.maps.places.PlacesService(map);
            const request = {
              location: userLocation,
              radius: '5000', // 5km radius
              type: ['supermarket']
            };

            service.nearbySearch(request, (results, status) => {
              if (status === google.maps.places.PlacesServiceStatus.OK) {
                const supermarketList = document.getElementById('supermarket-list-items');
                supermarketList.innerHTML = ''; // Clear previous results

                // Calculate distances for all supermarkets
                const supermarketsWithDistance = results.map((place) => {
                  const distance = calculateDistance(userLocation.lat, userLocation.lng,
                                                     place.geometry.location.lat(),
                                                     place.geometry.location.lng());
                  return { ...place, distance };
                });

                // Sort supermarkets by distance
                supermarketsWithDistance.sort((a, b) => a.distance - b.distance);

                // Show all markers on the map
                supermarketsWithDistance.forEach((place) => {
                  new google.maps.Marker({
                    map: map,
                    position: place.geometry.location,
                    title: place.name,
                    icon: {
                      url: 'http://maps.google.com/mapfiles/ms/icons/shopping.png',
                      scaledSize: new google.maps.Size(32, 32)
                    }
                  });
                });

                // Limit the list to the 5 closest supermarkets
                const topResults = supermarketsWithDistance.slice(0, 5);

                // Create list items
                topResults.forEach((place, index) => {
                  const listItem = document.createElement('li');
                  listItem.style = `
                    padding: 15px;
                    border-bottom: 1px solid #e0e0e0;
                    display: flex;
                    align-items: flex-start;
                    gap: 15px;
                    transition: background-color 0.2s ease;
                  `;
                  listItem.addEventListener('mouseover', () => listItem.style.backgroundColor = '#f8f9fa');
                  listItem.addEventListener('mouseout', () => listItem.style.backgroundColor = 'white');

                  const photoUrl = place.photos
                    ? place.photos[0].getUrl({ maxWidth: 100, maxHeight: 100 })
                    : 'https://via.placeholder.com/100?text=No+Image';

                  listItem.innerHTML = `
                    <img src="${photoUrl}" alt="${place.name}" style="
                      width: 100px;
                      height: 100px;
                      object-fit: cover;
                      border-radius: 8px;
                      border: 1px solid #ddd;
                    ">
                    <div style="flex: 1;">
                      <strong style="
                        font-size: 16px;
                        color: #1a0dab;
                        text-decoration: none;
                      ">${index + 1}. ${place.name}</strong>
                      <p style="
                        margin: 5px 0;
                        font-size: 14px;
                        color: #4d5156;
                      ">Address: ${place.vicinity || 'Not available'}</p>
                      <p style="
                        margin: 5px 0;
                        font-size: 14px;
                        color: #188038;
                      ">Distance: ${place.distance.toFixed(2)} km</p>
                      <p style="
                        margin: 5px 0;
                        font-size: 14px;
                        color: #f39c12;
                      ">Rating: ${place.rating || 'No rating'} (${place.user_ratings_total || 'No reviews'} reviews)</p>
                    </div>
                  `;
                  supermarketList.appendChild(listItem);

                  // Add a click listener to each list item to center the map on the corresponding supermarket
                  listItem.addEventListener('click', () => {
                    map.setCenter(place.geometry.location);
                    map.setZoom(15);
                  });
                });
              } else {
                console.error('Places service failed: ' + status);
              }
            });

          }, () => {
            handleLocationError(true, map.getCenter());
          });
        } else {
          handleLocationError(false, map.getCenter());
        }
      }

      // Haversine formula to calculate distance between two lat/lng points
      function calculateDistance(lat1, lng1, lat2, lng2) {
        const R = 6371; // Earth's radius in kilometers
        const dLat = degreesToRadians(lat2 - lat1);
        const dLng = degreesToRadians(lng2 - lng1);
        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                  Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) *
                  Math.sin(dLng / 2) * Math.sin(dLng / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c; // Distance in kilometers
      }

      function degreesToRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      function handleLocationError(browserHasGeolocation, pos) {
        console.error(browserHasGeolocation ?
          'Error: The Geolocation service failed.' :
          'Error: Your browser doesn\'t support geolocation.');
      }

      document.addEventListener('turbo:load', function() {
        if (document.getElementById('map')) {
          initMap();
        }
      });

      window.initMap = initMap;


    function autoDismissFlash() {
  document.querySelectorAll('.alert').forEach(function(alert) {
    setTimeout(function() {
      alert.style.transition = "opacity 0.5s ease-out";
      alert.style.opacity = "0";
      setTimeout(() => alert.remove(), 500);
    }, 3000); // 3 seconds before disappearing
  });
}

document.addEventListener("DOMContentLoaded", autoDismissFlash);

document.addEventListener("turbo:render", autoDismissFlash);
document.addEventListener("turbo:load", autoDismissFlash);
document.addEventListener("turbo:frame-load", autoDismissFlash);


document.addEventListener("turbo:before-cache", function() {
  let flashContainer = document.getElementById("flash-messages");
  if (flashContainer) {
    flashContainer.innerHTML = "";
  }
});

document.addEventListener("turbo:render", function() {
  const flashContainer = document.getElementById("flash-messages");
  if (flashContainer) {
    const observer = new MutationObserver(autoDismissFlash);
    observer.observe(flashContainer, { childList: true, subtree: true });
  }
});
    </script>
  <% end %>

<footer class="footer">
  <div class="footer-content">
    <div class="footer-column about-us">
      <h3>About Us</h3>
      <p>This website is a personal web development project created by a solo developer. Built with passion and dedication, this project showcases skills in front-end and back-end development. Every line of code, design, and feature was carefully crafted to bring you an engaging and user-friendly experience.</p>
      <p>Feel free to explore and enjoy the results of a one-person development team!</p>
    </div>

    <div class="footer-column important-info">
      <h3>Important Information</h3>
      <ul>
        <li><a href="<%= privacy_policy_path %>">Privacy Policy</a></li>
        <li><a href="/terms-of-service">Terms of Service</a></li>
        <li><a href="/contact-us">Contact Us</a></li>
      </ul>
    </div>

    <div class="footer-column follow-me">
      <h3>Follow Me</h3>
      <ul>
        <li><a href="https://twitter.com/yourprofile">X</a></li>
        <li><a href="https://www.linkedin.com/in/jo%C3%A3o-eduardo-malta-herrer-8206261b0/">LinkedIn</a></li>
        <li><a href="https://github.com/Edutuga1">GitHub</a></li>
      </ul>
    </div>

    <div class="footer-column more-info">
      <h3>More Info</h3>
      <p>Check out more projects and information about the development process.</p>
      <a href="#">Learn More</a>
    </div>
  </div>

  <div class="footer-bottom">
    <p>&copy; 2025 ShopListy. All rights reserved.</p>
  </div>
</footer>
</body>
</html>
